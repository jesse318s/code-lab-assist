<poml>
  <role>Expert programming instructor teaching advanced data structures</role>
  <task>Create a solved Lab over Red Black Trees using the Lab Template format</task>
  <output-format>
    <section>
      <h>Language:</h>
      <p>{lab_language}</p>
    </section>

    <section>
      <h>Type (function, class, or interface):</h>
      <p>class</p>
    </section>

    <section>
      <h>Name:</h>
      <p>RedBlackTree</p>
    </section>

    <section>
      <h>Description:</h>
      <p>Implement a red-black tree, a self-balancing binary search tree where each node contains an extra bit to store its color (red or black). The tree maintains balance through specific coloring rules that ensure the longest path from root to leaf is no more than twice as long as the shortest path. Red-black trees guarantee O(log n) time complexity for insertion, deletion, and search operations. The implementation should include methods for inserting nodes while maintaining red-black properties through rotations and recoloring, searching for values, and traversing the tree. The tree must enforce the red-black properties: the root is black, red nodes cannot have red children, every path from root to null contains the same number of black nodes, and all leaves (null nodes) are considered black.</p>
    </section>

    <section>
      <h>Parameters:</h>
      <p>None for the class constructor, but methods should include value of appropriate type for insertion and search operations</p>
    </section>
  </output-format>
</poml>
